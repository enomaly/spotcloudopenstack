#! /usr/bin/python
# spotcloudopentstack.py

"""
Create directories and generate config files
for SpotCloud OpenStack Adapter

It assumes you have an admin user and a project created
See http://wiki.openstack.org/RunningNova

Usage:

    sudo spotcloudopenstack-init USER_NAME PROJECT_NAME

"""


import sys
import os
import re
import shutil
from glob import glob
from subprocess import call


ROOT_DIR = '/var/lib/spotcloudopenstack'
REPO_DIR = os.path.join(ROOT_DIR, 'repo')
CONFIG = os.path.join(ROOT_DIR, "spotcloudopenstack.conf")
PUBLISH_SCRIPT = os.path.join(ROOT_DIR, 'sc-publish-tarball.sh')
LOG_DIR = '/var/log/spotcloudopenstack'
KEYS_DIR = os.path.join(ROOT_DIR, 'keys')
SQLITE_FILE = '%s/db.sqlite' % ROOT_DIR
SQLALCHEMY_DATABASE_URI = 'sqlite:///%s' % SQLITE_FILE
CONFIG_DEFAULTS = (
    'NOVA_REGION = "nova"',
    'NOVA_MANAGE = "/usr/bin/nova-manage"',
    'SQLALCHEMY_DATABASE_URI = "%s"' % SQLALCHEMY_DATABASE_URI,
    'PACKAGE_DOWNLOAD_URL_TMPL = "http://spotcloud.appspot.com/api/package/download?uuid=%s"',
    'REPO_DIR = "%s"' % REPO_DIR,
    'PUBLISH_SCRIPT = "%s"' % PUBLISH_SCRIPT,
    'LOGGING_FILE = "%s/api.log"' % LOG_DIR)
UWSGI_APP = 'wsgi.py'


def make_dirs(user):
    "Make all needed dirs"
    for dir_ in [ROOT_DIR, REPO_DIR, LOG_DIR, KEYS_DIR]:
        if not os.path.exists(dir_):
            os.mkdir(dir_)
        if call(
            ['sudo', 'chown', "%s:%s"  % (user, user), dir_]):
            raise RuntimeError(
                "Could not chown %s for user %s" % (
                    dir_, user))


def is_user_exists(user):
    "Check /etc/passwd for user"
    if re.search(
        "^%s:" % user,
        open('/etc/passwd').read(),
        re.M):
        return True
    return False


def update_sudoers(user):
    "User needs password less sudo for mount,umount and losetup"
    content = open('/etc/sudoers').read()
    line = "\n%s ALL = NOPASSWD: /bin/mount,/sbin/losetup,/bin/umount\n" % ( 
        user, )
    if re.search("^%s" % user, content, re.M):
        print 'The record for %s in /etc/sudoers already exists.' % user
        print 'Make sure %s is able to sudo mount without password' % user
        return 
    print """
We are going to add %s at the end of your /etc/sudoers file.
Please, type 'yes' if this is OK for you. 
Othervise, make sure user %s has an ability to do password less
sudo mount, sudo umount and sudo losetup -a
""" % (line, user)
    if raw_input(" [yes | no]: ").lower() == 'yes':
        open('/etc/sudoers~', 'w').write(content) # backup
        open('/etc/sudoers', 'w').write(content+line)
        print '/etc/sudoers updated.'
    else:
        print '/etc/sudoers was not updated.' 


def user2group(user, group):
    "Add user to  group if not already done"
    match = re.search('^%s:x:\d+:(.*)$' % group, 
                      open('/etc/group').read(),
                      re.M)
    if not match:
        raise RuntimeError(
            "Could not find group %s in /etc/group" % group)
    if user not in match.group(1).split(','):
        if call(['sudo', 'gpasswd', '--add', user, group]):
            raise RuntimeError(
                "Could not add %s to %s group" % (user, group))


def make_user(user):
    """
    Make sure the user exists (create if needed),
    is in the disk group,
    is able to run password less sudo mount/umount
    and sudo losetup -a 

    """
    if not is_user_exists(user):
        cmd = "useradd -m -r --shell /bin/sh -G disk --home-dir %s %s" % (
            ROOT_DIR, user)
        if call(cmd, shell=True):
            raise RuntimeError(
                "Could not create user with command %s" % cmd)

    update_sudoers(user)

    user2group(user, 'disk')
    

def get_keys(user, project):
    "Dowload keys and return content of novarc"
    os.chdir(KEYS_DIR)
    for path in glob('*'):
        os.unlink(path)
    if call(
        ['nova-manage', 'project', 'zipfile', project, user]):
        raise RuntimeError(
            "Could not download credentials for %s/%s" % (
                user, project))
    if call(['unzip', 'nova.zip']):
        raise RuntimeError(
            "Could not uzip nova.zip")
    return open('novarc').read()


def make_publish_script(novarc):
    "Make script for publishing tar gz from running server"
    content = []
    for line in  novarc.split('\n'):
        line = line.strip()
        if line.startswith('NOVA_KEY_DIR'):
            content.append('NOVA_KEY_DIR="%s"' % KEYS_DIR)
            continue
        content.append(line)

    content.insert(0, '#!/bin/sh')
    content.append('uec-publish-tarball $1 $2 $3')
    open(PUBLISH_SCRIPT, 'w').write("\n".join(content))
    if call(['chmod', '+x', PUBLISH_SCRIPT]):
        raise RuntimeError(
            "Could not chmod +x %s" % PUBLISH_SCRIPT)


def make_config(novarc, user, project):
    "Make config file"
    def get_access_key(novarc):
        "Extract access key from novarc"
        match = re.search('EC2_ACCESS_KEY=\"([^"]+)', novarc)
        if not match:
            raise RuntimeError(
                "Could not extract EC2_ACCESS_KEY from %s" % novarc)
        return match.group(1)
    def get_secret_key(novarc):
        "Extract secret key from novarc"
        match = re.search('EC2_SECRET_KEY=\"([^"]+)', novarc)
        if not match:
            raise RuntimeError(
                "Could not extract EC2_SECRET_KEY from %s" % novarc)
        return match.group(1)
    def get_endpoint(novarc):
        "Extract Nova endpoint from novarc"
        match = re.search('EC2_URL=\"([^"]+)', novarc)
        if not match:
            raise RuntimeError(
                 "Could not extract EC2_URL from %s" % novarc)
        return match.group(1)
    content = list(CONFIG_DEFAULTS)
    content.append(
        'PROJECT_NAME = "%s"' % project)
    content.append(
        'USERNAME = "%s"' % user)
    print 'Please, provide username for your SpotCloud account.'
    content.append(
        'SPOTCLOUD_USER = "%s"' % raw_input(
            "SpotCloud username: ").strip())
    print 'Please, provide password for your SpotCloud account.'
    content.append(
        'SPOTCLOUD_PASSWD = "%s"' % raw_input(
            "SpotCloud password: ").strip())
    
    content.append(
        'NOVA_ACCESS_KEY = "%s"' % get_access_key(novarc))
    content.append(
        'NOVA_SECRET_KEY = "%s"' % get_secret_key(novarc))
    content.append(
        'NOVA_ENDPOINT = "%s"' % get_endpoint(novarc))
    open(CONFIG, 'w').write("\n".join(content))
    print CONFIG, 'was created'


def initialize_db(user):
    "Drop/create tables, make sure db file name is owned by user"
    from spotcloudopenstack import models
    models.init_db(SQLALCHEMY_DATABASE_URI)
    if 'sqlite' in SQLALCHEMY_DATABASE_URI:
        if call(['chmod', '+x', SQLITE_FILE]):
            raise RuntimeError(
                "Could not chmod +x for %s" % SQLITE_FILE)
        if call(['chown', user, SQLITE_FILE]):
            raise RuntimeError(
                "Could not do chown for %s" % SQLITE_FILE)

def copy_uwsgi():
    "Copy uwsgi starter to working dir"
    import spotcloudopenstack
    src_dir = os.path.realpath(os.path.dirname(
            spotcloudopenstack.__file__))
    src_path = os.path.join(src_dir, UWSGI_APP)
    shutil.copy(src_path, ROOT_DIR)


def doit(user, project):
    "Make directories, publish script and config file"
    make_user(user)
    make_dirs(user)
    novarc = get_keys(user, project)
    make_publish_script(novarc)
    make_config(novarc, user, project)
    initialize_db(user)
    copy_uwsgi()
    print 'Done'


def main(argv=sys.argv):
    "Check args and run doit method"
    if os.getuid() != 0:
        print 'Run me with sudo, please.'
        sys.exit(1)

    if len(argv) != 3:
        print __doc__
        sys.exit(1)
    doit(argv[1], argv[2])


if __name__ == '__main__':
    main()
